import Mock from 'mockjs';

// ÈÖçÁΩÆ Mock
Mock.setup({
  timeout: '200-600' // Ê®°ÊãüÁΩëÁªúÂª∂Ëøü
});

// ÈÄöÁî®ÂìçÂ∫îÊ†ºÂºè
const createResponse = (data: any, message = 'Êìç‰ΩúÊàêÂäü') => ({
  code: 200,
  data,
  msg: message,
  success: true,
  timestamp: Date.now()
});

const createErrorResponse = (message = 'Êìç‰ΩúÂ§±Ë¥•', code = 500) => ({
  code,
  data: null,
  msg: message,
  success: false,
  timestamp: Date.now()
});

// Áî®Êà∑Êï∞ÊçÆÊ®°Êùø
const userTemplate = {
  'id|+1': 1,
  'name': '@cname',
  'email': '@email',
  'phone': /^1[3-9]\d{9}$/,
  'avatar': '@image("100x100", "@color", "@cname")',
  'department': '@pick(["ÊäÄÊúØÈÉ®", "‰∫ßÂìÅÈÉ®", "ËøêËê•ÈÉ®", "Â∏ÇÂú∫ÈÉ®", "‰∫∫‰∫ãÈÉ®"])',
  'position': '@pick(["ÂâçÁ´ØÂ∑•Á®ãÂ∏à", "ÂêéÁ´ØÂ∑•Á®ãÂ∏à", "‰∫ßÂìÅÁªèÁêÜ", "UIËÆæËÆ°Â∏à", "ÊµãËØïÂ∑•Á®ãÂ∏à"])',
  'status|1': [0, 1], // 0: Á¶ÅÁî®, 1: ÂêØÁî®
  'gender|1': ['male', 'female'],
  'age|18-65': 25,
  'address': '@county(true)',
  'createTime': '@datetime',
  'updateTime': '@datetime',
  'salary|5000-50000': 8000,
  'experience|1-10': 3
};

// ‰∫ßÂìÅÊï∞ÊçÆÊ®°Êùø
const productTemplate = {
  'id|+1': 1,
  'name': '@ctitle(5, 15)',
  'description': '@cparagraph(1, 3)',
  'price|100-9999.2': 299.99,
  'category': '@pick(["ÁîµÂ≠ê‰∫ßÂìÅ", "ÊúçË£ÖÈûãÂ∏Ω", "ÂÆ∂Â±ÖÁî®ÂìÅ", "Âõæ‰π¶Èü≥ÂÉè", "ËøêÂä®Êà∑Â§ñ"])',
  'brand': '@pick(["Apple", "Samsung", "Huawei", "Xiaomi", "Nike", "Adidas"])',
  'stock|0-1000': 100,
  'sales|0-10000': 500,
  'rating|1-5.1': 4.5,
  'images': ['@image("300x300")', '@image("300x300")', '@image("300x300")'],
  'status|1': [0, 1, 2], // 0: ‰∏ãÊû∂, 1: ‰∏äÊû∂, 2: Áº∫Ë¥ß
  'createTime': '@datetime',
  'updateTime': '@datetime'
};

// ÈÉ®Èó®/ÁªÑÁªáÊû∂ÊûÑÊï∞ÊçÆÊ®°Êùø
const departmentTemplate = {
  'id|+1': 1,
  'name': '@pick(["ÊäÄÊúØÈÉ®", "‰∫ßÂìÅÈÉ®", "ËøêËê•ÈÉ®", "Â∏ÇÂú∫ÈÉ®", "‰∫∫‰∫ãÈÉ®", "Ë¥¢Âä°ÈÉ®"])',
  'code': '@word(3, 5)',
  'manager': '@cname',
  'phone': /^1[3-9]\d{9}$/,
  'email': '@email',
  'description': '@cparagraph(1, 2)',
  'createTime': '@datetime',
  'parentId|0-3': 0,
  'sort|1-100': 1,
  'status|1': [0, 1]
};

// Â≠òÂÇ®Êï∞ÊçÆ
let userData: any[] = [];
let productData: any[] = [];
let departmentData: any[] = [];

// ÂàùÂßãÂåñÊï∞ÊçÆ
const initData = () => {
  // ÁîüÊàêÁî®Êà∑Êï∞ÊçÆ
  userData = Mock.mock({
    'list|50': [userTemplate]
  }).list;

  // ÁîüÊàê‰∫ßÂìÅÊï∞ÊçÆ
  productData = Mock.mock({
    'list|30': [productTemplate]
  }).list;

  // ÁîüÊàêÈÉ®Èó®Êï∞ÊçÆ
  const departments = Mock.mock({
    'list|10': [departmentTemplate]
  }).list;

  // ÊûÑÂª∫Ê†ëÂΩ¢ÁªìÊûÑ
  departmentData = buildTree(departments);
};

// ÊûÑÂª∫Ê†ëÂΩ¢ÁªìÊûÑ
const buildTree = (list: any[]) => {
  const rootNodes: any[] = [];
  const nodeMap: Record<number, any> = {};

  // ÂàõÂª∫ËäÇÁÇπÊò†Â∞Ñ
  list.forEach(item => {
    nodeMap[item.id] = { ...item, children: [] };
  });

  // ÊûÑÂª∫Ê†ëÁªìÊûÑ
  list.forEach(item => {
    if (item.parentId === 0) {
      rootNodes.push(nodeMap[item.id]);
    } else {
      const parent = nodeMap[item.parentId];
      if (parent) {
        parent.children.push(nodeMap[item.id]);
      }
    }
  });

  return rootNodes;
};

// ÂàÜÈ°µÂ§ÑÁêÜ
const paginate = (data: any[], current = 1, pageSize = 10) => {
  const start = (current - 1) * pageSize;
  const end = start + pageSize;
  return {
    list: data.slice(start, end),
    total: data.length,
    current,
    pageSize
  };
};

// ÊêúÁ¥¢ËøáÊª§
const filterData = (data: any[], keyword: string, fields: string[]) => {
  if (!keyword) return data;
  return data.filter(item =>
    fields.some(field =>
      item[field] && item[field].toLowerCase().includes(keyword.toLowerCase())
    )
  );
};

// ÊéíÂ∫èÂ§ÑÁêÜ
const sortData = (data: any[], sortField: string | null, sortOrder: 'asc' | 'desc' | undefined) => {
  if (!sortField || !sortOrder) return data;

  return [...data].sort((a, b) => {
    const aVal = a[sortField];
    const bVal = b[sortField];

    if (aVal < bVal) {
      return sortOrder === 'asc' ? -1 : 1;
    }
    if (aVal > bVal) {
      return sortOrder === 'asc' ? 1 : -1;
    }
    return 0;
  });
};

// Ê†ëÂΩ¢Êï∞ÊçÆËøáÊª§
const filterTreeData = (tree: any[], keyword: string): any[] => {
  if (!keyword) return tree;

  return tree.reduce((filtered: any[], node: any) => {
    const matchesKeyword = node.title?.toLowerCase().includes(keyword.toLowerCase()) ||
                          node.name?.toLowerCase().includes(keyword.toLowerCase());
    const filteredChildren = node.children ? filterTreeData(node.children, keyword) : [];

    if (matchesKeyword || filteredChildren.length > 0) {
      filtered.push({
        ...node,
        children: filteredChildren.length > 0 ? filteredChildren : node.children
      });
    }

    return filtered;
  }, []);
};

// ÂàùÂßãÂåñÊï∞ÊçÆ
initData();

// Á°Æ‰øùÂú®ÊµèËßàÂô®ÁéØÂ¢É‰∏≠ÂàùÂßãÂåñ Mock
if (typeof window !== 'undefined') {
  // Âä®ÊÄÅÂØºÂÖ•Âπ∂ÂàùÂßãÂåñ API
  import('./api').then(() => {
    console.log('%cüé≠ Mock ÊúçÂä°ÂàùÂßãÂåñÂÆåÊàê', 'color: #52c41a; font-weight: bold;');
  }).catch(error => {
    console.error('‚ùå Mock API ÂØºÂÖ•Â§±Ë¥•:', error);
  });
}

export {
  createResponse,
  createErrorResponse,
  userData,
  productData,
  departmentData,
  paginate,
  filterData,
  sortData,
  userTemplate,
  productTemplate
};